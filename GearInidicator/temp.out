import smbus
import time

#declare i2c specifics
bus = smbus.SMBus(1)
OLED_Address = 0x3c
OLED_Command_Mode = 0x80
OLED_Data_Mode = 0x40



def init():
	time.sleep(1)
	sendCommand(0xAE)
	sendCommand(0x20)	#Set memory addressing mode
	sendCommand(0x10)	#
	sendCommand(0xB0)
	sendCommand(0xC8)

	sendCommand(0x00)
	sendCommand(0x10)
	sendCommand(0x40)

	sendCommand(0x81)
	sendCommand(0x7F)
	sendCommand(0xA1)
	sendCommand(0xA6)
	sendCommand(0xA8)
	sendCommand(0x3F)
	sendCommand(0xA4)
	sendCommand(0xD3)
	sendCommand(0x00)
	sendCommand(0xD5)
	sendCommand(0xF0)
	sendCommand(0xD9)
	sendCommand(0x22)
	sendCommand(0xDA)
	sendCommand(0x12)
	sendCommand(0xDB)
	sendCommand(0x20)
	sendCommand(0x8D)
	sendCommand(0x14)
	sendCommand(0xAF)
	
	time.sleep(1)


def powerUp():
	sendCommand(0xA5)
	time.sleep(0.5)

def powerDown():
	sendCommand(0xA4)	# Power off display
	time.sleep(0.5)

def clearScreen():
	sendCommand(0x01)
	time.sleep(0.1)

def setCursorPosition(row, col):
	rowOffsets = [0x00, 0x40]
	baseOffset = 0x80
	position = baseOffset + rowOffsets[row] + col
	sendCommand(position)


"""
sendCommand(command)

	command - Hex data to send to the OLED as a command

Used to send data to the OLED that should be interpreted as a command, and not display data.
Commands are used to control the functions/configuration of the OLED.
This method sends the control byte with the D/C Bit set LOW to tell the OLED that the next
data sent will be a command
""" 

def sendCommand(command):
	bus.write_byte_data(OLED_Address, OLED_Command_Mode, command)
	time.sleep(0.01)
	
"""
sendData(data)

	data - Hex data to send to the OLED as display data

"""

def sendData(data):
	bus.write_byte_data(OLED_Address, OLED_Data_Mode, data)
	time.sleep(0.01)

"""
sendString(text, row, col)

	text - The string that you want to display
	row - The row on which to begin printing the string (0 is upper, 1 is lower)
	col - the position within the row to start printing the string (0 to 15)

Sends a string to the lcd to be displaced at the cursor position indicated
"""

def sendString(text, row, col):
	setCursorPosition(row, col)
	for char in text:
		sendData(int(hex(ord(char)), 16))

	


#clearScreen()
#time.sleep(1)

#string = "Flash"
#sendString(string, 1, 7)

#for i in range(0, 4):
#	sendData(0xFF)

init()
time.sleep(2)
for i in range(8):
	page = 0xB0 + i 
	sendCommand(page)
	for i in range(132):
		sendData(0xAA)
	sendCommand(0x00)
	sendCommand(0x10)


